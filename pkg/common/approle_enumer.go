// Code generated by "enumer -type=AppRole -json -sql -transform=snake-upper"; DO NOT EDIT.

package common

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _AppRoleName = "ROLE_GUESTROLE_USERROLE_ADMIN"

var _AppRoleIndex = [...]uint8{0, 10, 19, 29}

const _AppRoleLowerName = "role_guestrole_userrole_admin"

func (i AppRole) String() string {
	if i < 0 || i >= AppRole(len(_AppRoleIndex)-1) {
		return fmt.Sprintf("AppRole(%d)", i)
	}
	return _AppRoleName[_AppRoleIndex[i]:_AppRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AppRoleNoOp() {
	var x [1]struct{}
	_ = x[RoleGuest-(0)]
	_ = x[RoleUser-(1)]
	_ = x[RoleAdmin-(2)]
}

var _AppRoleValues = []AppRole{RoleGuest, RoleUser, RoleAdmin}

var _AppRoleNameToValueMap = map[string]AppRole{
	_AppRoleName[0:10]:       RoleGuest,
	_AppRoleLowerName[0:10]:  RoleGuest,
	_AppRoleName[10:19]:      RoleUser,
	_AppRoleLowerName[10:19]: RoleUser,
	_AppRoleName[19:29]:      RoleAdmin,
	_AppRoleLowerName[19:29]: RoleAdmin,
}

var _AppRoleNames = []string{
	_AppRoleName[0:10],
	_AppRoleName[10:19],
	_AppRoleName[19:29],
}

// AppRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AppRoleString(s string) (AppRole, error) {
	if val, ok := _AppRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AppRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AppRole values", s)
}

// AppRoleValues returns all values of the enum
func AppRoleValues() []AppRole {
	return _AppRoleValues
}

// AppRoleStrings returns a slice of all String values of the enum
func AppRoleStrings() []string {
	strs := make([]string, len(_AppRoleNames))
	copy(strs, _AppRoleNames)
	return strs
}

// IsAAppRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AppRole) IsAAppRole() bool {
	for _, v := range _AppRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AppRole
func (i AppRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AppRole
func (i *AppRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AppRole should be a string, got %s", data)
	}

	var err error
	*i, err = AppRoleString(s)
	return err
}

func (i AppRole) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *AppRole) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AppRole: %[1]T(%[1]v)", value)
	}

	val, err := AppRoleString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
